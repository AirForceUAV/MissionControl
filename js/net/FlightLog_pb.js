/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

// var encoder = new jspb.BinaryEncoder();

// var ascii = "ASCII should work in 3, 2, 1..."
// var utf8_two_bytes = "¬©";
// var utf8_three_bytes = "‚ùÑ";
// var utf8_four_bytes = "üòÅ";

// encoder.writeString(ascii);
// encoder.writeString(utf8_two_bytes);
// encoder.writeString(utf8_three_bytes);
// encoder.writeString(utf8_four_bytes);
// console.log(encoder);
// console.log(encoder.end());

// var decoder = jspb.BinaryDecoder.alloc(encoder.end());
// console.log(ascii);
// console.log(decoder);
// console.log(decoder.readString(ascii.length));
// console.log(decoder.readString(utf8_two_bytes.length));
// console.log(decoder.readString(utf8_three_bytes.length));
// console.log(decoder.readString(utf8_four_bytes.length));


// assertEquals(ascii, decoder.readString(ascii.length));
// assertEquals(utf8_two_bytes, decoder.readString(utf8_two_bytes.length));
// assertEquals(utf8_three_bytes, decoder.readString(utf8_three_bytes.length));
// assertEquals(utf8_four_bytes, decoder.readString(utf8_four_bytes.length));

goog.exportSymbol('proto.buffers.Attitude', null, global);
goog.exportSymbol('proto.buffers.Barometre', null, global);
goog.exportSymbol('proto.buffers.Channels', null, global);
goog.exportSymbol('proto.buffers.Compass', null, global);
goog.exportSymbol('proto.buffers.Coordinate', null, global);
goog.exportSymbol('proto.buffers.GPS', null, global);
goog.exportSymbol('proto.buffers.Location', null, global);
goog.exportSymbol('proto.buffers.Point', null, global);
goog.exportSymbol('proto.buffers.Waypoint', null, global);
goog.exportSymbol('proto.buffers.sensors', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Location.displayName = 'proto.buffers.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Location} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    altitude: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Location}
 */
proto.buffers.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Location;
  return proto.buffers.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Location}
 */
proto.buffers.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Location} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Location.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Location.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getAltitude();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float latitude = 1;
 * @return {number}
 */
proto.buffers.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.buffers.Location.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float longitude = 2;
 * @return {number}
 */
proto.buffers.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.buffers.Location.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float altitude = 3;
 * @return {number}
 */
proto.buffers.Location.prototype.getAltitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.buffers.Location.prototype.setAltitude = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Point.displayName = 'proto.buffers.Point';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Point} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    location: (f = msg.getLocation()) && proto.buffers.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Point}
 */
proto.buffers.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Point;
  return proto.buffers.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Point}
 */
proto.buffers.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.buffers.Location;
      reader.readMessage(value,proto.buffers.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Point} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Point.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Point.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.buffers.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 ID = 1;
 * @return {number}
 */
proto.buffers.Point.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.buffers.Point.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Location location = 2;
 * @return {?proto.buffers.Location}
 */
proto.buffers.Point.prototype.getLocation = function() {
  return /** @type{?proto.buffers.Location} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Location, 2));
};


/** @param {?proto.buffers.Location|undefined} value */
proto.buffers.Point.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.buffers.Point.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.Point.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Attitude = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.Attitude, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Attitude.displayName = 'proto.buffers.Attitude';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Attitude.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Attitude.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Attitude} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Attitude.toObject = function(includeInstance, msg) {
  var f, obj = {
    pitch: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    roll: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    yaw: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Attitude}
 */
proto.buffers.Attitude.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Attitude;
  return proto.buffers.Attitude.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Attitude} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Attitude}
 */
proto.buffers.Attitude.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoll(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Attitude} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Attitude.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Attitude.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Attitude.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPitch();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getRoll();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getYaw();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float pitch = 1;
 * @return {number}
 */
proto.buffers.Attitude.prototype.getPitch = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.buffers.Attitude.prototype.setPitch = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float roll = 2;
 * @return {number}
 */
proto.buffers.Attitude.prototype.getRoll = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.buffers.Attitude.prototype.setRoll = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float yaw = 3;
 * @return {number}
 */
proto.buffers.Attitude.prototype.getYaw = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.buffers.Attitude.prototype.setYaw = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Coordinate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.Coordinate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Coordinate.displayName = 'proto.buffers.Coordinate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Coordinate.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Coordinate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Coordinate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Coordinate.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Coordinate}
 */
proto.buffers.Coordinate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Coordinate;
  return proto.buffers.Coordinate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Coordinate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Coordinate}
 */
proto.buffers.Coordinate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Coordinate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Coordinate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Coordinate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Coordinate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.buffers.Coordinate.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.buffers.Coordinate.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.buffers.Coordinate.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.buffers.Coordinate.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.buffers.Coordinate.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.buffers.Coordinate.prototype.setZ = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.GPS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.GPS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.GPS.displayName = 'proto.buffers.GPS';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.GPS.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.GPS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.GPS} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.GPS.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, false),
    numStars: jspb.Message.getFieldWithDefault(msg, 2, 0),
    location: (f = msg.getLocation()) && proto.buffers.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.GPS}
 */
proto.buffers.GPS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.GPS;
  return proto.buffers.GPS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.GPS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.GPS}
 */
proto.buffers.GPS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumStars(value);
      break;
    case 3:
      var value = new proto.buffers.Location;
      reader.readMessage(value,proto.buffers.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.GPS} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.GPS.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.GPS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.GPS.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getNumStars();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.buffers.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool state = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.buffers.GPS.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.buffers.GPS.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 num_stars = 2;
 * @return {number}
 */
proto.buffers.GPS.prototype.getNumStars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.buffers.GPS.prototype.setNumStars = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Location location = 3;
 * @return {?proto.buffers.Location}
 */
proto.buffers.GPS.prototype.getLocation = function() {
  return /** @type{?proto.buffers.Location} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Location, 3));
};


/** @param {?proto.buffers.Location|undefined} value */
proto.buffers.GPS.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.buffers.GPS.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.GPS.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Compass = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.Compass, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Compass.displayName = 'proto.buffers.Compass';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Compass.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Compass.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Compass} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Compass.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, false),
    attitude: (f = msg.getAttitude()) && proto.buffers.Attitude.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Compass}
 */
proto.buffers.Compass.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Compass;
  return proto.buffers.Compass.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Compass} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Compass}
 */
proto.buffers.Compass.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.buffers.Attitude;
      reader.readMessage(value,proto.buffers.Attitude.deserializeBinaryFromReader);
      msg.setAttitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Compass} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Compass.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Compass.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Compass.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getAttitude();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.buffers.Attitude.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool state = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.buffers.Compass.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.buffers.Compass.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Attitude attitude = 2;
 * @return {?proto.buffers.Attitude}
 */
proto.buffers.Compass.prototype.getAttitude = function() {
  return /** @type{?proto.buffers.Attitude} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Attitude, 2));
};


/** @param {?proto.buffers.Attitude|undefined} value */
proto.buffers.Compass.prototype.setAttitude = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.buffers.Compass.prototype.clearAttitude = function() {
  this.setAttitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.Compass.prototype.hasAttitude = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Barometre = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.Barometre, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Barometre.displayName = 'proto.buffers.Barometre';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Barometre.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Barometre.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Barometre} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Barometre.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, false),
    pressure: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    temperature: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    altitude: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Barometre}
 */
proto.buffers.Barometre.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Barometre;
  return proto.buffers.Barometre.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Barometre} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Barometre}
 */
proto.buffers.Barometre.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPressure(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Barometre} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Barometre.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Barometre.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Barometre.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getAltitude();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional bool state = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.buffers.Barometre.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.buffers.Barometre.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float Pressure = 2;
 * @return {number}
 */
proto.buffers.Barometre.prototype.getPressure = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.buffers.Barometre.prototype.setPressure = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float Temperature = 3;
 * @return {number}
 */
proto.buffers.Barometre.prototype.getTemperature = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.buffers.Barometre.prototype.setTemperature = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float Altitude = 4;
 * @return {number}
 */
proto.buffers.Barometre.prototype.getAltitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.buffers.Barometre.prototype.setAltitude = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Waypoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffers.Waypoint.repeatedFields_, null);
};
goog.inherits(proto.buffers.Waypoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Waypoint.displayName = 'proto.buffers.Waypoint';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.buffers.Waypoint.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Waypoint.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Waypoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Waypoint} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Waypoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    proto.buffers.Point.toObject, includeInstance),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Waypoint}
 */
proto.buffers.Waypoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Waypoint;
  return proto.buffers.Waypoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Waypoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Waypoint}
 */
proto.buffers.Waypoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.buffers.Point;
      reader.readMessage(value,proto.buffers.Point.deserializeBinaryFromReader);
      msg.addPoint(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Waypoint} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Waypoint.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Waypoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Waypoint.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIndex();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.buffers.Point.serializeBinaryToWriter
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional sint32 index = 1;
 * @return {number}
 */
proto.buffers.Waypoint.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.buffers.Waypoint.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Point point = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.buffers.Point>}
 */
proto.buffers.Waypoint.prototype.getPointList = function() {
  return /** @type{!Array.<!proto.buffers.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.buffers.Point, 2));
};


/** @param {!Array.<!proto.buffers.Point>} value */
proto.buffers.Waypoint.prototype.setPointList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.buffers.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.buffers.Point}
 */
proto.buffers.Waypoint.prototype.addPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.buffers.Point, opt_index);
};


proto.buffers.Waypoint.prototype.clearPointList = function() {
  this.setPointList([]);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.buffers.Waypoint.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.buffers.Waypoint.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.Channels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.Channels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.Channels.displayName = 'proto.buffers.Channels';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.Channels.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.Channels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.Channels} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.Channels.toObject = function(includeInstance, msg) {
  var f, obj = {
    ch1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ch2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ch3: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ch4: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ch5: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ch6: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ch7: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ch8: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.Channels}
 */
proto.buffers.Channels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.Channels;
  return proto.buffers.Channels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.Channels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.Channels}
 */
proto.buffers.Channels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh3(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh4(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh5(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh6(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh7(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCh8(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.Channels} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Channels.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.Channels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.Channels.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCh1();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getCh2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getCh3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getCh4();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getCh5();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getCh6();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getCh7();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getCh8();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 ch1 = 1;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ch2 = 2;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 ch3 = 3;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh3 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 ch4 = 4;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh4 = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 ch5 = 5;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh5 = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 ch6 = 6;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh6 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 ch7 = 7;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh7 = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 ch8 = 8;
 * @return {number}
 */
proto.buffers.Channels.prototype.getCh8 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.buffers.Channels.prototype.setCh8 = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buffers.sensors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buffers.sensors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.buffers.sensors.displayName = 'proto.buffers.sensors';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buffers.sensors.prototype.toObject = function(opt_includeInstance) {
  return proto.buffers.sensors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buffers.sensors} msg The msg instance to transform.
 * @return {!Object}
 */
proto.buffers.sensors.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    gps: (f = msg.getGps()) && proto.buffers.GPS.toObject(includeInstance, f),
    compass: (f = msg.getCompass()) && proto.buffers.Compass.toObject(includeInstance, f),
    baro: (f = msg.getBaro()) && proto.buffers.Barometre.toObject(includeInstance, f),
    waypoint: (f = msg.getWaypoint()) && proto.buffers.Waypoint.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.buffers.Location.toObject(includeInstance, f),
    home: (f = msg.getHome()) && proto.buffers.Location.toObject(includeInstance, f),
    initAlt: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    distancetotarget: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    distancefromhome: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    channelsinput: (f = msg.getChannelsinput()) && proto.buffers.Channels.toObject(includeInstance, f),
    channelsoutput: (f = msg.getChannelsoutput()) && proto.buffers.Channels.toObject(includeInstance, f),
    loiterpwm: (f = msg.getLoiterpwm()) && proto.buffers.Channels.toObject(includeInstance, f),
    altitude: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    mode: jspb.Message.getFieldWithDefault(msg, 15, ""),
    gear: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buffers.sensors}
 */
proto.buffers.sensors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buffers.sensors;
  return proto.buffers.sensors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buffers.sensors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buffers.sensors}
 */
proto.buffers.sensors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.buffers.GPS;
      reader.readMessage(value,proto.buffers.GPS.deserializeBinaryFromReader);
      msg.setGps(value);
      break;
    case 3:
      var value = new proto.buffers.Compass;
      reader.readMessage(value,proto.buffers.Compass.deserializeBinaryFromReader);
      msg.setCompass(value);
      break;
    case 4:
      var value = new proto.buffers.Barometre;
      reader.readMessage(value,proto.buffers.Barometre.deserializeBinaryFromReader);
      msg.setBaro(value);
      break;
    case 5:
      var value = new proto.buffers.Waypoint;
      reader.readMessage(value,proto.buffers.Waypoint.deserializeBinaryFromReader);
      msg.setWaypoint(value);
      break;
    case 6:
      var value = new proto.buffers.Location;
      reader.readMessage(value,proto.buffers.Location.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 7:
      var value = new proto.buffers.Location;
      reader.readMessage(value,proto.buffers.Location.deserializeBinaryFromReader);
      msg.setHome(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInitAlt(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistancetotarget(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistancefromhome(value);
      break;
    case 11:
      var value = new proto.buffers.Channels;
      reader.readMessage(value,proto.buffers.Channels.deserializeBinaryFromReader);
      msg.setChannelsinput(value);
      break;
    case 12:
      var value = new proto.buffers.Channels;
      reader.readMessage(value,proto.buffers.Channels.deserializeBinaryFromReader);
      msg.setChannelsoutput(value);
      break;
    case 13:
      var value = new proto.buffers.Channels;
      reader.readMessage(value,proto.buffers.Channels.deserializeBinaryFromReader);
      msg.setLoiterpwm(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.buffers.sensors} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.sensors.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buffers.sensors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.buffers.sensors.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getGps();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.buffers.GPS.serializeBinaryToWriter
    );
  }
  f = this.getCompass();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.buffers.Compass.serializeBinaryToWriter
    );
  }
  f = this.getBaro();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.buffers.Barometre.serializeBinaryToWriter
    );
  }
  f = this.getWaypoint();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.buffers.Waypoint.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.buffers.Location.serializeBinaryToWriter
    );
  }
  f = this.getHome();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.buffers.Location.serializeBinaryToWriter
    );
  }
  f = this.getInitAlt();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = this.getDistancetotarget();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = this.getDistancefromhome();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = this.getChannelsinput();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.buffers.Channels.serializeBinaryToWriter
    );
  }
  f = this.getChannelsoutput();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.buffers.Channels.serializeBinaryToWriter
    );
  }
  f = this.getLoiterpwm();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.buffers.Channels.serializeBinaryToWriter
    );
  }
  f = this.getAltitude();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = this.getMode();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getGear();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional float timestamp = 1;
 * @return {number}
 */
proto.buffers.sensors.prototype.getTimestamp = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.buffers.sensors.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional GPS gps = 2;
 * @return {?proto.buffers.GPS}
 */
proto.buffers.sensors.prototype.getGps = function() {
  return /** @type{?proto.buffers.GPS} */ (
    jspb.Message.getWrapperField(this, proto.buffers.GPS, 2));
};


/** @param {?proto.buffers.GPS|undefined} value */
proto.buffers.sensors.prototype.setGps = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.buffers.sensors.prototype.clearGps = function() {
  this.setGps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasGps = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Compass compass = 3;
 * @return {?proto.buffers.Compass}
 */
proto.buffers.sensors.prototype.getCompass = function() {
  return /** @type{?proto.buffers.Compass} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Compass, 3));
};


/** @param {?proto.buffers.Compass|undefined} value */
proto.buffers.sensors.prototype.setCompass = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.buffers.sensors.prototype.clearCompass = function() {
  this.setCompass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasCompass = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Barometre baro = 4;
 * @return {?proto.buffers.Barometre}
 */
proto.buffers.sensors.prototype.getBaro = function() {
  return /** @type{?proto.buffers.Barometre} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Barometre, 4));
};


/** @param {?proto.buffers.Barometre|undefined} value */
proto.buffers.sensors.prototype.setBaro = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.buffers.sensors.prototype.clearBaro = function() {
  this.setBaro(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasBaro = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Waypoint waypoint = 5;
 * @return {?proto.buffers.Waypoint}
 */
proto.buffers.sensors.prototype.getWaypoint = function() {
  return /** @type{?proto.buffers.Waypoint} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Waypoint, 5));
};


/** @param {?proto.buffers.Waypoint|undefined} value */
proto.buffers.sensors.prototype.setWaypoint = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.buffers.sensors.prototype.clearWaypoint = function() {
  this.setWaypoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasWaypoint = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Location target = 6;
 * @return {?proto.buffers.Location}
 */
proto.buffers.sensors.prototype.getTarget = function() {
  return /** @type{?proto.buffers.Location} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Location, 6));
};


/** @param {?proto.buffers.Location|undefined} value */
proto.buffers.sensors.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.buffers.sensors.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Location home = 7;
 * @return {?proto.buffers.Location}
 */
proto.buffers.sensors.prototype.getHome = function() {
  return /** @type{?proto.buffers.Location} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Location, 7));
};


/** @param {?proto.buffers.Location|undefined} value */
proto.buffers.sensors.prototype.setHome = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.buffers.sensors.prototype.clearHome = function() {
  this.setHome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasHome = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float init_alt = 8;
 * @return {number}
 */
proto.buffers.sensors.prototype.getInitAlt = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.buffers.sensors.prototype.setInitAlt = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float DistanceToTarget = 9;
 * @return {number}
 */
proto.buffers.sensors.prototype.getDistancetotarget = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.buffers.sensors.prototype.setDistancetotarget = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional float DistanceFromHome = 10;
 * @return {number}
 */
proto.buffers.sensors.prototype.getDistancefromhome = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.buffers.sensors.prototype.setDistancefromhome = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional Channels ChannelsInput = 11;
 * @return {?proto.buffers.Channels}
 */
proto.buffers.sensors.prototype.getChannelsinput = function() {
  return /** @type{?proto.buffers.Channels} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Channels, 11));
};


/** @param {?proto.buffers.Channels|undefined} value */
proto.buffers.sensors.prototype.setChannelsinput = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.buffers.sensors.prototype.clearChannelsinput = function() {
  this.setChannelsinput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasChannelsinput = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Channels ChannelsOutput = 12;
 * @return {?proto.buffers.Channels}
 */
proto.buffers.sensors.prototype.getChannelsoutput = function() {
  return /** @type{?proto.buffers.Channels} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Channels, 12));
};


/** @param {?proto.buffers.Channels|undefined} value */
proto.buffers.sensors.prototype.setChannelsoutput = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.buffers.sensors.prototype.clearChannelsoutput = function() {
  this.setChannelsoutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasChannelsoutput = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Channels LoiterPWM = 13;
 * @return {?proto.buffers.Channels}
 */
proto.buffers.sensors.prototype.getLoiterpwm = function() {
  return /** @type{?proto.buffers.Channels} */ (
    jspb.Message.getWrapperField(this, proto.buffers.Channels, 13));
};


/** @param {?proto.buffers.Channels|undefined} value */
proto.buffers.sensors.prototype.setLoiterpwm = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.buffers.sensors.prototype.clearLoiterpwm = function() {
  this.setLoiterpwm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.buffers.sensors.prototype.hasLoiterpwm = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float Altitude = 14;
 * @return {number}
 */
proto.buffers.sensors.prototype.getAltitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.buffers.sensors.prototype.setAltitude = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string Mode = 15;
 * @return {string}
 */
proto.buffers.sensors.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.buffers.sensors.prototype.setMode = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int32 Gear = 16;
 * @return {number}
 */
proto.buffers.sensors.prototype.getGear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.buffers.sensors.prototype.setGear = function(value) {
  jspb.Message.setField(this, 16, value);
};


goog.object.extend(exports, proto.buffers);
